//
//  Utilities.h
//
//  Created by sergio on 11/29/12.
//  Copyright 2012 Freescapes Labs. All rights reserved.
//

#define DEGREES_TO_RADIANS(__ANGLE__) ((__ANGLE__) / 180.0 * M_PI)
#define RANDOM_SEED() srandom((unsigned)(mach_absolute_time() & 0xFFFFFFFF))
#define RANDOM_INT(__MIN__, __MAX__) ((__MIN__) + random() % ((__MAX__) - (__MIN__)))

#pragma mark Autoresizing Constants

#define UIViewAutoresizingFlexiblePosition (UIViewAutoresizingFlexibleRightMargin | \
UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin | \
UIViewAutoresizingFlexibleBottomMargin)

#define UIViewAutoresizingFlexibleSize UIViewAutoresizingFlexibleWidth | \
UIViewAutoresizingFlexibleHeight

#pragma mark -

#define kOptimalByteOrder (kCGBitmapByteOrder32Little |  kCGImageAlphaPremultipliedFirst)

/////////////////////////////////////////////////////////////////////////////////////////
bool isIpad();
BOOL isWidescreen();
BOOL isRetina();
float pt2ipad(float pt);
float pt2ipadf(float pt, float factor);

#pragma mark NSObject
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
@interface NSObject (DelayBlock)
- (void)performBlock:(void(^)(void))block afterDelay:(NSTimeInterval)delay;
@end
#pragma mark -
#pragma mark radians/degrees wrapping
/////////////////////////////////////////////////////////////////////////////////////////
// wrap [rad] angle to [-PI..PI)
double radiansWrapPI(double fAng);

/////////////////////////////////////////////////////////////////////////////////////////
// wrap [rad] angle to [0..TWO_PI)
double radiansWrap2PI(double fAng);

/////////////////////////////////////////////////////////////////////////////////////////
// wrap [deg] angle to [-180..180)
double degWrap180(double fAng);

/////////////////////////////////////////////////////////////////////////////////////////
// wrap [deg] angle to [0..360)
double degWrap360(double fAng);

#pragma mark -
#pragma mark Geometry
/////////////////////////////////////////////////////////////////////////////////////////
CGAffineTransform _MakeRoundedRotationTransform(CGFloat angle);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgpAdd(CGPoint v1, CGPoint v2);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgpSub(CGPoint v1, CGPoint v2);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgpCrossDot(CGPoint v1, CGPoint v2);

/////////////////////////////////////////////////////////////////////////////////////////
float cgpDot(CGPoint v1, CGPoint v2);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgpMult(CGPoint v, float a);

/////////////////////////////////////////////////////////////////////////////////////////
float cgpLength(CGPoint v);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgpSwap(CGPoint v);

/////////////////////////////////////////////////////////////////////////////////////////
CGSize cgsSwap(CGSize v);

/////////////////////////////////////////////////////////////////////////////////////////
CGPoint cgs2p(CGSize s);

/////////////////////////////////////////////////////////////////////////////////////////
//CGPoint cgp2s(CGPoint p);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
CGSize cgsMult(CGSize v, float a);
